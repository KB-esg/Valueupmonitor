name: MSIT Telco Service Monitoring

on:
  schedule:
    - cron: '40 23 1-31/2 * *'  # UTC 23:40 (KST 08:40) 홀수날마다 실행
  workflow_dispatch:
    inputs:
      days_range:
        description: '몇 일 전까지의 게시물을 확인할지 설정'
        required: false
        default: '4'
        type: string
      check_sheets:
        description: 'Google Sheets 업데이트 여부'
        required: false
        default: 'true'
        type: boolean
      spreadsheet_name:
        description: 'Google Sheets 스프레드시트 이름'
        required: false
        default: 'MSIT 통신 통계'
        type: string

permissions:
  contents: write

jobs:
  monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        google-chrome --version  # 디버깅용 버전 출력

    - name: Install Xvfb
      run: sudo apt-get install -y xvfb

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          pip install selenium beautifulsoup4 python-telegram-bot requests pandas gspread oauth2client lxml html5lib selenium-stealth webdriver-manager
        fi

    - name: Create directories
      run: |
        mkdir -p downloads
        mkdir -p screenshots

    - name: Fix indentation in msit_monitor.py
      run: |
        # 스크립트 생성
        cat > fix_indentation.py << 'EOF'
        #!/usr/bin/env python
        import os
        import re
        import time
        import random

        def fix_setup_driver_function():
            # 파일 경로
            file_path = 'msit_monitor.py'
    
            if not os.path.exists(file_path):
                print(f"오류: {file_path} 파일을 찾을 수 없습니다.")
                return False
    
            # 파일 내용 읽기
            with open(file_path, 'r', encoding='utf-8') as file:
                content = file.read()
    
            # 백업 파일 만들기
            backup_path = f"{file_path}.bak"
            with open(backup_path, 'w', encoding='utf-8') as backup_file:
                backup_file.write(content)
            print(f"원본 파일 백업 완료: {backup_path}")
    
            # setup_driver 함수를 찾아 교체
            new_function = """def setup_driver(self):
                \"\"\"Selenium WebDriver 설정 (웹드라이버 매니저 사용)\"\"\"
                options = Options()
                options.add_argument('--no-sandbox')
                options.add_argument('--disable-dev-shm-usage')
                options.add_argument('--disable-gpu')
                options.add_argument('--window-size=1920,1080')
                # 중요: 각 실행마다 고유한 사용자 데이터 디렉터리 사용
                options.add_argument(f'--user-data-dir=/tmp/chrome-user-data-{int(time.time())}-{random.randint(1000, 9999)}')
        
                # 사용자 에이전트 설정
                options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36")
        
                # 자동화 감지 우회를 위한 옵션
                options.add_experimental_option("excludeSwitches", ["enable-automation"])
                options.add_experimental_option("useAutomationExtension", False)
                options.add_argument("--disable-blink-features=AutomationControlled")
        
                # webdriver-manager를 사용하여 ChromeDriver 자동 설치
                try:
                    from webdriver_manager.chrome import ChromeDriverManager
                    from selenium.webdriver.chrome.service import Service
            
                    driver = webdriver.Chrome(
                        service=Service(ChromeDriverManager().install()),
                        options=options
                    )
                    logger.info("WebDriver 초기화 완료 (webdriver-manager 사용)")
                except Exception as e:
                    logger.error(f"WebDriver 초기화 실패: {str(e)}")
            # 대체 방법 시도
                    try:
                        driver = webdriver.Chrome(options=options)
                        logger.info("WebDriver 대체 방법으로 초기화 완료")
                    except Exception as e2:
                        logger.error(f"WebDriver 대체 초기화 실패: {str(e2)}")
                        raise
        
                driver.set_page_load_timeout(60)
        
                # Selenium Stealth 적용 (있는 경우)
                try:
                    from selenium_stealth import stealth
                    stealth(driver,
                        languages=["ko-KR", "ko"],
                        vendor="Google Inc.",
                        platform="Win32",
                        webgl_vendor="Intel Inc.",
                        renderer="Intel Iris OpenGL Engine",
                        fix_hairline=True)
                    logger.info("Selenium Stealth 적용 완료")
                except ImportError:
                    logger.warning("selenium-stealth 라이브러리를 찾을 수 없습니다. 기본 모드로 계속합니다.")
        
                return driver"""
    
            # setup_driver 함수를 새로운 함수로 교체
            pattern = re.compile(r'def setup_driver\(self\):.*?return driver', re.DOTALL)
            modified_content = pattern.sub(new_function, content)
    
            # random 모듈이 import 되어 있는지 확인
            if 'import random' not in modified_content:
                # 새로 추가
                if 'import time' in modified_content:
                    # time import 다음에 random import 추가
                    modified_content = modified_content.replace('import time', 'import time\nimport random')
                else:
                    # 파일 상단에 random import 추가
                    modified_content = 'import random\n' + modified_content
    
            # 수정된 내용을 파일에 저장
            with open(file_path, 'w', encoding='utf-8') as file:
                file.write(modified_content)
    
            print(f"{file_path} 파일이 성공적으로 수정되었습니다.")
            return True

        if __name__ == "__main__":
            fix_setup_driver_function()
        EOF
        
        # 스크립트 실행
        python fix_indentation.py
        
        # 확인을 위해 첫 10줄 출력
        echo "수정된 setup_driver 함수 확인:"
        grep -A 5 "def setup_driver" msit_monitor.py

    - name: Create screenshot script
      run: |
        cat > take_screenshot.py << 'EOF'
        from selenium import webdriver
        from selenium.webdriver.chrome.service import Service
        from selenium.webdriver.chrome.options import Options
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        from webdriver_manager.chrome import ChromeDriverManager
        import time
        import sys
        import os
        import random

        def take_screenshots(url=None, filename_prefix="screenshot"):
            options = Options()
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64)")
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option("useAutomationExtension", False)
            
            # 중요: 고유한 사용자 데이터 디렉터리 사용
            unique_dir = f'/tmp/chrome-user-data-{int(time.time())}-{random.randint(1000, 9999)}'
            options.add_argument(f'--user-data-dir={unique_dir}')
            print(f"Chrome 사용자 데이터 디렉토리: {unique_dir}")
            
            print("ChromeDriver 설치 시작...")
            driver_path = ChromeDriverManager().install()
            print(f"ChromeDriver 설치 완료: {driver_path}")
            
            driver = webdriver.Chrome(service=Service(driver_path), options=options)
            
            try:
                if url:
                    print(f"URL 접속: {url}")
                    driver.get(url)
                    time.sleep(5)
                    driver.save_screenshot(f"{filename_prefix}.png")
                    print(f"스크린샷 저장 완료: {filename_prefix}.png")
                else:
                    print("MSIT 메인 페이지 접속...")
                    driver.get('https://www.msit.go.kr')
                    time.sleep(5)
                    driver.save_screenshot('main_page.png')
                    print("메인 페이지 스크린샷 저장 완료")
                    
                    try:
                        print("통계정보 버튼 찾기...")
                        stats_button = WebDriverWait(driver, 10).until(
                            EC.element_to_be_clickable((By.XPATH, "//a[contains(text(), '통계정보')]"))
                        )
                        stats_button.click()
                        print("통계정보 버튼 클릭 성공")
                        time.sleep(5)
                        driver.save_screenshot('stats_page_after_click.png')
                        print("통계정보 페이지 스크린샷 저장 완료")
                    except Exception as click_error:
                        print(f"버튼 클릭 오류: {str(click_error)}")
                    
                    print("통계정보 페이지 직접 접속...")
                    driver.get('https://www.msit.go.kr/bbs/list.do?sCode=user&mPid=74&mId=99')
                    time.sleep(5)
                    driver.save_screenshot('stats_page_direct.png')
                    print("통계정보 페이지 직접 접속 스크린샷 저장 완료")
                    
                    with open('page_source.html', 'w', encoding='utf-8') as f:
                        f.write(driver.page_source)
                    
                    if "시스템 점검 안내" in driver.page_source:
                        print("시스템 점검 안내 페이지 감지됨")
                        driver.save_screenshot('system_maintenance.png')
                        try:
                            driver.execute_script("document.querySelectorAll('.overlay').forEach(e => e.remove());")
                            driver.save_screenshot('after_overlay_removal.png')
                            print("오버레이 제거 시도 후 스크린샷 저장 완료")
                        except Exception as overlay_err:
                            print(f"오버레이 제거 오류: {str(overlay_err)}")
            except Exception as e:
                print(f'스크린샷 오류: {str(e)}')
            finally:
                print("WebDriver 종료")
                driver.quit()
        
        if __name__ == "__main__":
            if len(sys.argv) > 1:
                take_screenshots(sys.argv[1], sys.argv[2] if len(sys.argv) > 2 else "custom_screenshot")
            else:
                take_screenshots()
        EOF

    - name: Test screenshot functionality
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        sleep 2
        
        # Python 버전 확인
        python --version
        
        # 테스트 스크립트 실행
        echo "스크린샷 테스트 스크립트 실행..."
        python take_screenshot.py

    - name: Run monitoring script
      env:
        TELCO_NEWS_TOKEN: ${{ secrets.TELCO_NEWS_TOKEN }}
        TELCO_NEWS_TESTER: ${{ secrets.TELCO_NEWS_TESTER }}
        MSIT_GSPREAD_ref: ${{ secrets.MSIT_GSPREAD_ref }}
        MSIT_SPREADSHEET_ID: ${{ secrets.MSIT_SPREADSHEET_ID }}
        DAYS_RANGE: ${{ github.event.inputs.days_range || '4' }}
        CHECK_SHEETS: ${{ github.event.inputs.check_sheets || 'true' }}
        SPREADSHEET_NAME: ${{ github.event.inputs.spreadsheet_name || 'MSIT 통신 통계' }}
        PYTHONIOENCODING: utf-8
      run: |
        export DISPLAY=:99
        
        # 모니터링 스크립트 실행
        echo "모니터링 스크립트 실행..."
        python msit_monitor.py || { echo "모니터링 스크립트 실행 실패"; exit 1; }

    - name: Take screenshots (always)
      if: always()
      run: |
        export DISPLAY=:99
        
        # 간단한 스크린샷 스크립트 생성
        cat > simple_screenshot.py << 'EOF'
        from selenium import webdriver
        from selenium.webdriver.chrome.service import Service
        from selenium.webdriver.chrome.options import Options
        from webdriver_manager.chrome import ChromeDriverManager
        import time
        import random

        options = Options()
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        
        # 고유한 사용자 데이터 디렉터리 사용
        temp_dir = f"/tmp/chrome-data-{random.randint(1000, 9999)}-{int(time.time())}"
        options.add_argument(f"--user-data-dir={temp_dir}")
        
        print(f"ChromeDriver 설치 시작 (simple_screenshot.py)...")
        driver_path = ChromeDriverManager().install()
        print(f"ChromeDriver 설치 완료: {driver_path}")
        
        print("WebDriver 초기화...")
        driver = webdriver.Chrome(service=Service(driver_path), options=options)
        
        try:
            print("MSIT 메인 페이지 접속...")
            driver.get("https://www.msit.go.kr")
            time.sleep(5)
            driver.save_screenshot("msit_page.png")
            print("MSIT 메인 페이지 스크린샷 저장 완료")
            
            print("MSIT 통계 페이지 접속...")
            driver.get("https://www.msit.go.kr/bbs/list.do?sCode=user&mPid=74&mId=99")
            time.sleep(5)
            driver.save_screenshot("msit_stats_page.png")
            print("MSIT 통계 페이지 스크린샷 저장 완료")
        except Exception as e:
            print(f"스크린샷 오류: {str(e)}")
        finally:
            print("WebDriver 종료")
            driver.quit()
        EOF
        
        # 스크립트 실행
        python simple_screenshot.py || echo "간단한 스크린샷 스크립트 실패, 계속 진행"

    - name: Archive artifacts
      if: always()
      run: |
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        mkdir -p artifacts
        cp -r *.log *.png *.html downloads/* screenshots/* *.bak artifacts/ 2>/dev/null || true
        echo "실행 정보:" > artifacts/run_info.txt
        echo "실행 ID: ${{ github.run_id }}" >> artifacts/run_info.txt
        echo "실행 번호: ${{ github.run_number }}" >> artifacts/run_info.txt
        echo "타임스탬프: ${TIMESTAMP}" >> artifacts/run_info.txt
        echo "실행자: ${{ github.actor }}" >> artifacts/run_info.txt
        echo "워크플로우: ${{ github.workflow }}" >> artifacts/run_info.txt
        tar -czf monitoring-artifacts-${TIMESTAMP}.tar.gz artifacts/
        echo "ARTIFACT_PATH=monitoring-artifacts-${TIMESTAMP}.tar.gz" >> $GITHUB_ENV
        echo "ARTIFACT_NAME=monitoring-artifacts-${TIMESTAMP}" >> $GITHUB_ENV
        echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV

    - name: Create Release
      if: always()
      uses: softprops/action-gh-release@v1
      with:
        tag_name: monitoring-${{ env.TIMESTAMP }}
        name: 모니터링 실행 ${{ github.run_number }} (${{ env.TIMESTAMP }})
        files: ${{ env.ARTIFACT_PATH }}
        body: |
          ## MSIT 통신 통계 모니터링 실행 결과
          - **실행 ID**: ${{ github.run_id }}
          - **실행 번호**: ${{ github.run_number }}
          - **실행 시간**: ${{ env.TIMESTAMP }}
          - **실행 유형**: ${{ github.event_name }}
          이 릴리스에는 모니터링 스크립트 실행 결과와 관련 로그 및 스크린샷이 포함되어 있습니다.
        token: ${{ secrets.GITHUB_TOKEN }}
