name: MSIT Telco Service Monitoring

on:
  schedule:
    - cron: '40 23 1-31/2 * *'  # UTC 23:40 (KST 08:40) 홀수날마다 실행
  workflow_dispatch:
    inputs:
      days_range:
        description: '몇 일 전까지의 게시물을 확인할지 설정'
        required: false
        default: '4'
        type: string
      check_sheets:
        description: 'Google Sheets 업데이트 여부'
        required: false
        default: 'true'
        type: boolean
      spreadsheet_name:
        description: 'Google Sheets 스프레드시트 이름'
        required: false
        default: 'MSIT 통신 통계'
        type: string

permissions:
  contents: write

jobs:
  monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install Chrome and ChromeDriver
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f 3 | cut -d '.' -f 1)
        wget -q "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION" -O chromedriver-version.txt
        CHROMEDRIVER_VERSION=$(cat chromedriver-version.txt)
        wget -q "https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip" -O chromedriver.zip
        unzip -q chromedriver.zip
        chmod +x chromedriver
        sudo mv chromedriver /usr/local/bin/

    - name: Install Xvfb
      run: sudo apt-get install -y xvfb

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install selenium beautifulsoup4 python-telegram-bot requests pandas gspread oauth2client lxml html5lib selenium-stealth

    - name: Create downloads directory
      run: mkdir -p downloads

    - name: Create screenshot script
      run: |
        cat > take_screenshot.py << 'EOF'
        from selenium import webdriver
        from selenium.webdriver.chrome.service import Service
        from selenium.webdriver.chrome.options import Options
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        import time
        import sys
        import os

        def take_screenshots(url=None, filename_prefix="screenshot"):
            options = Options()
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64)")
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option("useAutomationExtension", False)
            service = Service('/usr/local/bin/chromedriver')
            driver = webdriver.Chrome(service=service, options=options)
            try:
                if url:
                    driver.get(url)
                    time.sleep(5)
                    driver.save_screenshot(f"{filename_prefix}.png")
                else:
                    driver.get('https://www.msit.go.kr')
                    time.sleep(5)
                    driver.save_screenshot('main_page.png')
                    try:
                        stats_button = WebDriverWait(driver, 10).until(
                            EC.element_to_be_clickable((By.XPATH, "//a[contains(text(), '통계정보')]"))
                        )
                        stats_button.click()
                        time.sleep(5)
                        driver.save_screenshot('stats_page_after_click.png')
                    except Exception as click_error:
                        print(f"버튼 클릭 오류: {str(click_error)}")
                    driver.get('https://www.msit.go.kr/bbs/list.do?sCode=user&mPid=74&mId=99')
                    time.sleep(5)
                    driver.save_screenshot('stats_page_direct.png')
                    with open('page_source.html', 'w', encoding='utf-8') as f:
                        f.write(driver.page_source)
                    if "시스템 점검 안내" in driver.page_source:
                        driver.save_screenshot('system_maintenance.png')
                        try:
                            driver.execute_script("document.querySelectorAll('.overlay').forEach(e => e.remove());")
                            driver.save_screenshot('after_overlay_removal.png')
                        except Exception as overlay_err:
                            print(f"오버레이 제거 오류: {str(overlay_err)}")
            except Exception as e:
                print(f'스크린샷 오류: {str(e)}')
            finally:
                driver.quit()
        if __name__ == "__main__":
            if len(sys.argv) > 1:
                take_screenshots(sys.argv[1], sys.argv[2] if len(sys.argv) > 2 else "custom_screenshot")
            else:
                take_screenshots()
        EOF

    - name: Run monitoring script
      env:
        TELCO_NEWS_TOKEN: ${{ secrets.TELCO_NEWS_TOKEN }}
        TELCO_NEWS_TESTER: ${{ secrets.TELCO_NEWS_TESTER }}
        MSIT_GSPREAD_ref: ${{ secrets.MSIT_GSPREAD_ref }}
        MSIT_SPREADSHEET_ID: ${{ secrets.MSIT_SPREADSHEET_ID }}
        DAYS_RANGE: ${{ github.event.inputs.days_range || '4' }}
        CHECK_SHEETS: ${{ github.event.inputs.check_sheets || 'true' }}
        SPREADSHEET_NAME: ${{ github.event.inputs.spreadsheet_name || 'MSIT 통신 통계' }}
        PYTHONIOENCODING: utf-8
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        sleep 2
        python msit_monitor.py

    - name: Take screenshots (always)
      if: always()
      run: |
        export DISPLAY=:99
        # 필요한 종속성 확인 및 설치
        pip list | grep -q selenium || pip install selenium
        
        # 간단한 스크린샷 스크립트 생성
        echo 'from selenium import webdriver
        from selenium.webdriver.chrome.service import Service
        from selenium.webdriver.chrome.options import Options
        import time

        options = Options()
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        service = Service("/usr/local/bin/chromedriver")
        driver = webdriver.Chrome(service=service, options=options)
        
        try:
            driver.get("https://www.msit.go.kr")
            time.sleep(5)
            driver.save_screenshot("msit_page.png")
            
            driver.get("https://www.msit.go.kr/bbs/list.do?sCode=user&mPid=74&mId=99")
            time.sleep(5)
            driver.save_screenshot("msit_stats_page.png")
        except Exception as e:
            print(f"스크린샷 오류: {str(e)}")
        finally:
            driver.quit()' > simple_screenshot.py
        
        # 스크립트 실행
        python simple_screenshot.py

    - name: Archive artifacts
      if: always()
      run: |
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        mkdir -p artifacts
        cp -r *.log *.png *.html downloads/* artifacts/ 2>/dev/null || true
        echo "실행 정보:" > artifacts/run_info.txt
        echo "실행 ID: ${{ github.run_id }}" >> artifacts/run_info.txt
        echo "실행 번호: ${{ github.run_number }}" >> artifacts/run_info.txt
        echo "타임스탬프: ${TIMESTAMP}" >> artifacts/run_info.txt
        echo "실행자: ${{ github.actor }}" >> artifacts/run_info.txt
        echo "워크플로우: ${{ github.workflow }}" >> artifacts/run_info.txt
        tar -czf monitoring-artifacts-${TIMESTAMP}.tar.gz artifacts/
        echo "ARTIFACT_PATH=monitoring-artifacts-${TIMESTAMP}.tar.gz" >> $GITHUB_ENV
        echo "ARTIFACT_NAME=monitoring-artifacts-${TIMESTAMP}" >> $GITHUB_ENV
        echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV

    - name: Create Release
      if: always()
      uses: softprops/action-gh-release@v1
      with:
        tag_name: monitoring-${{ env.TIMESTAMP }}
        name: 모니터링 실행 ${{ github.run_number }} (${{ env.TIMESTAMP }})
        files: ${{ env.ARTIFACT_PATH }}
        body: |
          ## MSIT 통신 통계 모니터링 실행 결과
          - **실행 ID**: ${{ github.run_id }}
          - **실행 번호**: ${{ github.run_number }}
          - **실행 시간**: ${{ env.TIMESTAMP }}
          - **실행 유형**: ${{ github.event_name }}
          이 릴리스에는 모니터링 스크립트 실행 결과와 관련 로그 및 스크린샷이 포함되어 있습니다.
        token: ${{ secrets.GITHUB_TOKEN }}
