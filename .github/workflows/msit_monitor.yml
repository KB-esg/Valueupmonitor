name: MSIT Telco Service Monitoring

on:
  schedule:
    - cron: '40 23 1-31/2 * *'  # UTC 23:40 (KST 08:40) 홀수날마다 실행
  workflow_dispatch:
    inputs:
      days_range:
        description: '몇 일 전까지의 게시물을 확인할지 설정'
        required: false
        default: '4'
        type: string
      check_sheets:
        description: 'Google Sheets 업데이트 여부'
        required: false
        default: 'true'
        type: boolean
      spreadsheet_name:
        description: 'Google Sheets 스프레드시트 이름'
        required: false
        default: 'MSIT 통신 통계'
        type: string

permissions:
  contents: write

jobs:
  monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        google-chrome --version  # 디버깅용 버전 출력

    - name: Install Xvfb
      run: sudo apt-get install -y xvfb

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          pip install selenium beautifulsoup4 python-telegram-bot requests pandas gspread oauth2client lxml html5lib selenium-stealth webdriver-manager
        fi

    - name: Create directories
      run: |
        mkdir -p downloads
        mkdir -p screenshots
        mkdir -p html_content

    - name: Run monitoring script
      env:
        TELCO_NEWS_TOKEN: ${{ secrets.TELCO_NEWS_TOKEN }}
        TELCO_NEWS_TESTER: ${{ secrets.TELCO_NEWS_TESTER }}
        MSIT_GSPREAD_ref: ${{ secrets.MSIT_GSPREAD_ref }}
        MSIT_SPREADSHEET_ID: ${{ secrets.MSIT_SPREADSHEET_ID }}
        DAYS_RANGE: ${{ github.event.inputs.days_range || '4' }}
        CHECK_SHEETS: ${{ github.event.inputs.check_sheets || 'true' }}
        SPREADSHEET_NAME: ${{ github.event.inputs.spreadsheet_name || 'MSIT 통신 통계' }}
        PYTHONIOENCODING: utf-8
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        sleep 2
        
        # 모니터링 스크립트 실행
        echo "모니터링 스크립트 실행..."
        python msit_monitor.py || { echo "모니터링 스크립트 실행 실패"; exit 1; }

    - name: Take screenshots of document (if URL exists)
      if: always()
      run: |
        export DISPLAY=:99
        
        # 로그 파일에서 바로보기 URL 추출
        DOCUMENT_VIEW_URL=$(grep -o "바로보기 URL: [^ ]*" *.log 2>/dev/null | head -1 | sed 's/바로보기 URL: //')
        
        if [ -n "$DOCUMENT_VIEW_URL" ]; then
          echo "바로보기 URL 발견: $DOCUMENT_VIEW_URL"
          
          # 간단한 스크린샷 스크립트 작성
          cat > simple_capture.py << EOF
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import time
import sys
import os

def capture_url(url, output_path):
    options = Options()
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--headless')
    
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    
    try:
        print(f"URL 접속: {url}")
        driver.get(url)
        time.sleep(10)  # 로딩 대기
        
        # 스크린샷 저장
        driver.save_screenshot(output_path)
        print(f"스크린샷 저장 완료: {output_path}")
        
        # 페이지 소스 저장
        with open('document_content.html', 'w', encoding='utf-8') as f:
            f.write(driver.page_source)
        print("HTML 내용 저장 완료")
        
        return True
    except Exception as e:
        print(f"오류 발생: {str(e)}")
        return False
    finally:
        driver.quit()

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("사용법: python simple_capture.py <URL> [output_path]")
        sys.exit(1)
    
    url = sys.argv[1]
    output_path = sys.argv[2] if len(sys.argv) > 2 else "document_screenshot.png"
    
    success = capture_url(url, output_path)
    if not success:
        sys.exit(1)
EOF
          
          # 스크립트 실행
          python simple_capture.py "$DOCUMENT_VIEW_URL" "html_content/document_screenshot.png"
        else
          echo "바로보기 URL을 찾을 수 없음"
        fi

    - name: Archive artifacts
      if: always()
      run: |
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        mkdir -p artifacts
        cp -r *.log *.png *.html downloads/* screenshots/* html_content/* *.bak artifacts/ 2>/dev/null || true
        echo "실행 정보:" > artifacts/run_info.txt
        echo "실행 ID: ${{ github.run_id }}" >> artifacts/run_info.txt
        echo "실행 번호: ${{ github.run_number }}" >> artifacts/run_info.txt
        echo "타임스탬프: ${TIMESTAMP}" >> artifacts/run_info.txt
        echo "실행자: ${{ github.actor }}" >> artifacts/run_info.txt
        echo "워크플로우: ${{ github.workflow }}" >> artifacts/run_info.txt
        tar -czf monitoring-artifacts-${TIMESTAMP}.tar.gz artifacts/
        echo "ARTIFACT_PATH=monitoring-artifacts-${TIMESTAMP}.tar.gz" >> $GITHUB_ENV
        echo "ARTIFACT_NAME=monitoring-artifacts-${TIMESTAMP}" >> $GITHUB_ENV
        echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV

    - name: Create Release
      if: always()
      uses: softprops/action-gh-release@v1
      with:
        tag_name: monitoring-${{ env.TIMESTAMP }}
        name: 모니터링 실행 ${{ github.run_number }} (${{ env.TIMESTAMP }})
        files: ${{ env.ARTIFACT_PATH }}
        body: |
          ## MSIT 통신 통계 모니터링 실행 결과
          - **실행 ID**: ${{ github.run_id }}
          - **실행 번호**: ${{ github.run_number }}
          - **실행 시간**: ${{ env.TIMESTAMP }}
          - **실행 유형**: ${{ github.event_name }}
          이 릴리스에는 모니터링 스크립트 실행 결과와 관련 로그 및 스크린샷이 포함되어 있습니다.
        token: ${{ secrets.GITHUB_TOKEN }}
