name: 01_ESG Fund Data Scraper Enhanced

on:
  schedule:
    # 매주 금요일 오전 9시 (KST) = 목요일 오후 12시 (UTC)
    - cron: '0 0 * * 5'
  workflow_dispatch:  # 수동 실행도 가능하도록 설정
    inputs:
      period:
        description: '데이터 수집 기간'
        required: true
        default: '01'
        type: choice
        options:
          - '01'   # 1개월
          - '03'   # 3개월
          - '06'   # 6개월
          - 'YTD'  # 연초이후
          - '12'   # 1년
          - '36'   # 3년
          - '60'   # 5년

jobs:
  scrape-and-update:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements_esg.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-kor
        tesseract --version
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        echo "Current directory contents:"
        ls -la
        echo "Installing numpy first to avoid compatibility issues..."
        pip install numpy==1.24.3
        echo "Installing opencv-python..."
        pip install opencv-python==4.8.1.78
        echo "Installing playwright..."
        pip install playwright==1.40.0
        echo "Installing other requirements from requirements_esg.txt..."
        if [ -f requirements_esg.txt ]; then
          pip install -r requirements_esg.txt
        else
          echo "requirements_esg.txt not found, installing packages individually"
          pip install requests==2.31.0
          pip install pandas==2.0.3
          pip install gspread==5.10.0
          pip install google-auth==2.22.0
          pip install google-auth-oauthlib==1.0.0
          pip install google-auth-httplib2==0.1.0
          pip install openpyxl==3.1.2
          pip install Pillow==10.1.0
          pip install pytesseract==0.3.10
        fi
        echo "Verifying installations..."
        pip show numpy pandas playwright opencv-python
        echo "All installed packages:"
        pip list
    
    - name: Install Playwright browsers
      run: |
        echo "Installing Playwright browsers..."
        python -m playwright install chromium
        echo "Installing system dependencies..."
        sudo apt-get update
        sudo apt-get install -y \
          libnss3 \
          libnspr4 \
          libatk1.0-0 \
          libatk-bridge2.0-0 \
          libcups2 \
          libdrm2 \
          libdbus-1-3 \
          libatspi2.0-0 \
          libx11-6 \
          libxcomposite1 \
          libxdamage1 \
          libxext6 \
          libxfixes3 \
          libxrandr2 \
          libgbm1 \
          libxcb1 \
          libxkbcommon0 \
          libpango-1.0-0 \
          libcairo2 \
          libasound2t64 || true
    
    - name: Create directories
      run: |
        mkdir -p data_backup
        mkdir -p chart_analysis
        echo "📁 Created directories for data storage"
    
    - name: Set period environment variable
      run: |
        # workflow_dispatch 실행시 입력값 사용, 아니면 기본값 01 (1개월)
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "COLLECTION_PERIOD=${{ github.event.inputs.period }}" >> $GITHUB_ENV
        else
          echo "COLLECTION_PERIOD=01" >> $GITHUB_ENV
        fi
        echo "📅 Selected period: ${{ env.COLLECTION_PERIOD }}"
    
    - name: Run ESG Fund Scraper
      env:
        GOOGLE_SERVICE: ${{ secrets.GOOGLE_SERVICE }}
        KRFUND_SPREADSHEET_ID: ${{ secrets.KRFUND_SPREADSHEET_ID }}
        TELCO_NEWS_TOKEN: ${{ secrets.TELCO_NEWS_TOKEN }}
        TELCO_NEWS_TESTER: ${{ secrets.TELCO_NEWS_TESTER }}
        COLLECTION_PERIOD: ${{ env.COLLECTION_PERIOD }}
      run: |
        echo "🚀 Starting ESG Fund Scraper..."
        echo "📅 Collection period: $COLLECTION_PERIOD"
        python esg_krfund_scraper.py
        echo "✅ Scraper completed"
    
    - name: Check generated files
      run: |
        echo "📁 Data backup files:"
        ls -la data_backup/ || echo "No data_backup directory"
        echo ""
        echo "📸 Chart analysis files:"
        ls -la chart_analysis/ || echo "No chart_analysis directory"
        echo ""
        echo "📊 Chart analysis summary:"
        find chart_analysis/ -name "*.html" -exec echo "Found HTML: {}" \;
        find chart_analysis/ -name "*.png" | wc -l || echo "0" | xargs echo "PNG files count:"
    
    - name: Upload Chart Analysis Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: chart-analysis-${{ github.run_number }}
        path: chart_analysis/
        retention-days: 30
        if-no-files-found: warn
      continue-on-error: true
    
    - name: Upload Data Backup Artifacts  
      uses: actions/upload-artifact@v4
      with:
        name: esg-fund-data-${{ github.run_number }}
        path: data_backup/
        retention-days: 30
        if-no-files-found: warn
      continue-on-error: true
    
    - name: Create Summary Report
      run: |
        echo "# 📊 ESG Fund Data Collection Summary" > summary.md
        echo "" >> summary.md
        echo "## 📅 Collection Info" >> summary.md
        echo "- **Date:** $(date +'%Y-%m-%d %H:%M:%S')" >> summary.md
        echo "- **Workflow:** ${{ github.workflow }}" >> summary.md
        echo "- **Run Number:** ${{ github.run_number }}" >> summary.md
        echo "- **Period:** ${{ env.COLLECTION_PERIOD }}" >> summary.md
        echo "" >> summary.md
        
        period_text=""
        case "${{ env.COLLECTION_PERIOD }}" in
          "01") period_text="1개월" ;;
          "03") period_text="3개월" ;;
          "06") period_text="6개월" ;;
          "YTD") period_text="연초이후" ;;
          "12") period_text="1년" ;;
          "36") period_text="3년" ;;
          "60") period_text="5년" ;;
        esac
        echo "- **Period Description:** $period_text" >> summary.md
        echo "" >> summary.md
        
        echo "## 📁 Generated Files" >> summary.md
        echo "" >> summary.md
        
        echo "### 📊 Data Files" >> summary.md
        if [ -d "data_backup" ]; then
          ls -la data_backup/ | tail -n +2 | while read line; do
            echo "- $line" >> summary.md
          done
        else
          echo "- No data backup files generated" >> summary.md
        fi
        echo "" >> summary.md
        
        echo "### 📸 Chart Analysis Files" >> summary.md
        if [ -d "chart_analysis" ]; then
          ls -la chart_analysis/ | tail -n +2 | while read line; do
            echo "- $line" >> summary.md
          done
        else
          echo "- No chart analysis files generated" >> summary.md
        fi
        echo "" >> summary.md
        
        # 시트별 업데이트 상태 확인
        echo "## 📋 Sheet Update Status" >> summary.md
        echo "" >> summary.md
        echo "Expected sheets to be updated:" >> summary.md
        echo "- ESG_TOP5펀드" >> summary.md
        echo "- ESG_신규펀드" >> summary.md
        echo "- ESG_일별차트" >> summary.md
        echo "- ESG_차트비교검증" >> summary.md
        echo "" >> summary.md
        
        cat summary.md
    
    - name: Upload Summary Report
      uses: actions/upload-artifact@v4
      with:
        name: summary-report-${{ github.run_number }}
        path: summary.md
        retention-days: 30
      continue-on-error: true
    
    - name: Commit and push backup data
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # data_backup 디렉토리의 변경사항만 추가
        git add data_backup/
        
        # 변경사항이 있는 경우에만 커밋
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update ESG fund data backup - $(date +'%Y-%m-%d') - Period: ${{ env.COLLECTION_PERIOD }}"
          git push
        fi
      continue-on-error: true  # 백업 실패해도 워크플로우는 성공으로 처리
    
    - name: Send success notification
      if: success()
      env:
        TELCO_NEWS_TOKEN: ${{ secrets.TELCO_NEWS_TOKEN }}
        TELCO_NEWS_TESTER: ${{ secrets.TELCO_NEWS_TESTER }}
        COLLECTION_PERIOD: ${{ env.COLLECTION_PERIOD }}
      run: |
        python -c "
        import requests
        import os
        import glob
        
        bot_token = os.environ.get('TELCO_NEWS_TOKEN')
        chat_id = os.environ.get('TELCO_NEWS_TESTER')
        period = os.environ.get('COLLECTION_PERIOD', '01')
        
        period_map = {
            '01': '1개월',
            '03': '3개월', 
            '06': '6개월',
            'YTD': '연초이후',
            '12': '1년',
            '36': '3년',
            '60': '5년'
        }
        period_text = period_map.get(period, period)
        
        if bot_token and chat_id:
            data_files = len(glob.glob('data_backup/*.csv')) if os.path.exists('data_backup') else 0
            chart_files = len(glob.glob('chart_analysis/*.png')) if os.path.exists('chart_analysis') else 0
            html_files = len(glob.glob('chart_analysis/*.html')) if os.path.exists('chart_analysis') else 0
            
            message = f'✅ ESG Fund 데이터 수집 성공!\n\n📅 수집 기간: {period_text}\n📊 수집 결과:\n• 데이터 파일: {data_files}개\n• 차트 이미지: {chart_files}개\n• HTML 보고서: {html_files}개\n\n🔍 이미지 확인 방법:\n1. GitHub Actions → 이 실행 → Artifacts\n2. chart-analysis-${{ github.run_number }} 다운로드\n3. HTML 파일을 브라우저에서 열기'
            
            requests.post(f'https://api.telegram.org/bot{bot_token}/sendMessage', 
                          data={'chat_id': chat_id, 'text': message})
        "
      continue-on-error: true
    
    - name: Send failure notification
      if: failure()
      env:
        TELCO_NEWS_TOKEN: ${{ secrets.TELCO_NEWS_TOKEN }}
        TELCO_NEWS_TESTER: ${{ secrets.TELCO_NEWS_TESTER }}
      run: |
        python -c "import requests, os; bot_token = os.environ.get('TELCO_NEWS_TOKEN'); chat_id = os.environ.get('TELCO_NEWS_TESTER'); requests.post(f'https://api.telegram.org/bot{bot_token}/sendMessage', data={'chat_id': chat_id, 'text': '❌ ESG Fund 데이터 수집 워크플로우 실패!\n\n🔍 GitHub Actions에서 로그를 확인하세요.'}) if bot_token and chat_id else None"
      continue-on-error: true
